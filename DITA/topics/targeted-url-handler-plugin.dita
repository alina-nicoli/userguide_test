<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="targeted-url-handler-plugin">
  <title>Targeted URL Stream Handler Plugin Extension</title>
  <shortdesc>This type of <xref keyref="glossentry_plugin"><term>plugin</term></xref> can be used
    when it is necessary to impose custom URL stream handlers for specific URLs. </shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Plugin extensions<indexterm>URL Stream Handler</indexterm></indexterm>
        <indexterm>URL Stream Handler plugin extension</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <conbody>
    <p id="p_v42_dgk_54b">This <term>plugin</term> extension can handle the following protocols:
        <codeph>http</codeph>, <codeph>https</codeph>, or <codeph>sftp</codeph>. <ph
        keyref="product"/> usually provides specific fixed URL stream handlers. If it is set to
      handle connections for a specific protocol, this extension prompts for the URL stream handler
      for each open connection of a URL that has that protocol. </p>
    <p id="p_w42_dgk_54b">To use this type of <term>plugin</term>, you have to implement the
        <term>ro.sync.exml.plugin.urlstreamhandler.TargetedURLStreamHandlerPluginExtension</term>
      interface that provides the following methods:</p>
    <p id="p_x42_dgk_54b"><dl id="dl_y42_dgk_54b">
        <dlentry id="dlentry_z42_dgk_54b">
          <dt><b><term>boolean canHandleProtocol(String protocol)</term></b></dt>
          <dd>This method checks if the <term>plugin</term> can handle a specific protocol. If this
            method returns <codeph>true</codeph> for a specific protocol, the
              <term>getURLStreamHandler(URL)</term> method will be called for each open connection
            of a URL having this protocol.</dd>
        </dlentry>
        <dlentry id="dlentry_ap2_dgk_54b">
          <dt><b><term>URLStreamHandler getURLStreamHandler(URL url)</term></b></dt>
          <dd>
            <p id="p_bp2_dgk_54b">This method provides the URL handler for the specified URL and it
              is called for each open connection of a URL with a protocol that has the
                <term>canHandleProtocol(String)</term> method return <codeph>true</codeph>.</p>
            <p id="p_cp2_dgk_54b">If this method returns <codeph>null</codeph>, the default <ph
                keyref="product"/>
              <term>URLStreamHandler</term> is used.</p>
          </dd>
        </dlentry>
      </dl>To use this type of extension in your <term>plugin</term>, create an extension of
        <term>TargetedURLHandler</term> type in your <codeph>plugin.xml</codeph> file and specify
      the class that implements
      <term>TargetedURLStreamHandlerPluginExtension</term>:<codeblock outputclass="language-xml" id="codeblock_dp2_dgk_54b">&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;!DOCTYPE plugin SYSTEM "../plugin.dtd">
&lt;plugin name="CustomTargetedURLStreamHandlerPlugin" ..............>
 &lt;runtime>
  ........
 &lt;/runtime>
 
 &lt;extension type="TargetedURLHandler" 
          class="CustomTargetedURLStreamHandlerPluginExtension"/>
 ...............
  
&lt;/plugin>
</codeblock></p>
    <p id="p_ep2_dgk_54b">This extension can be useful in situations when connections opened from a
      specific host must be handled in a particular way. For example, the <ph keyref="product"/>
      <term>HTTP URLStreamHandler</term> may not be compatible for sending and receiving SOAP using
      the SUN Web Services implementation. In this case, you can override the stream handler (set by
        <ph keyref="product"/>) to use the default SUN <term>URLStreamHandler</term>, since it is
      more compatible with sending and receiving SOAP requests.</p>
    <codeblock outputclass="language-java" id="codeblock_fp2_dgk_54b">public class CustomTargetedURLStreamHandlerPluginExtension 
  implements TargetedURLStreamHandlerPluginExtension {

  @Override
  public boolean canHandleProtocol(String protocol) {
    boolean handleProtocol = false;
    if ("http".equals(protocol) || "https".equals(protocol)) {
      // This extension handles both HTTP and HTTPS protocols
      handleProtocol = true;
    }
    return handleProtocol;
  }

  @Override
  public URLStreamHandler getURLStreamHandler(URL url) {
    // This method is called only for the URLs with a protocol 
    // where canHandleProtocol(String) method returns true (HTTP and HTTPS)

    URLStreamHandler handler = null;
      
    String host = url.getHost();
    String protocol = url.getProtocol();
    if ("some_host".equals(host)) {
      // When there are connections opened from some_host, the SUN HTTP(S) 
      // handlers are used
      if ("http".equals(protocol)) {
        handler = (URLStreamHandler) Class.forName("sun.net.www.protocol.http.Handler")
.getConstructor(new Class[0]).newInstance(new Object[0]);
      } else {
        handler = (URLStreamHandler) Class.forName("sun.net.www.protocol.https.Handler")
.getConstructor(new Class[0]).newInstance(new Object[0]);
      }
    }
    return handler;
  }
}
</codeblock>
  </conbody>
</concept>
